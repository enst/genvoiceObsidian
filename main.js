/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  username: "placeholder",
  lastEditDateStr: "updatedDate:",
  dateFormat: "YYYY-MM-DD",
  peopleFolderPath: "All/Collaborators/",
  separationLineStr: "___",
  topLevelLine: "+++",
  templateFolderPath: "All/Templates/",
  dataviewHeaderLine: "---",
  templateDetectionStr: "type: task",
  peopleStr: "people:"
};
var TextPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Tagging & Adding People" });
    new import_obsidian.Setting(containerEl).setName("Username").setDesc("How other users will identify you in tags, notices, etc.").addText(
      (text) => text.setPlaceholder("default: user").setValue(this.plugin.settings.username).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.username = DEFAULT_SETTINGS.username;
        } else {
          this.plugin.settings.username = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Name list file").setDesc("File that stores all candidates for names to be added").addText(
      (text) => text.setPlaceholder("default: collaborator").setValue(this.plugin.settings.peopleFolderPath).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.peopleFolderPath = DEFAULT_SETTINGS.peopleFolderPath;
        } else {
          this.plugin.settings.peopleFolderPath = input;
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h1", { text: "Inserting & Updating Edit Dates" });
    new import_obsidian.Setting(containerEl).setName("Keyword: latest edit date").addText(
      (text) => text.setPlaceholder("default: updatedDate:").setValue(this.plugin.settings.lastEditDateStr).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.lastEditDateStr = DEFAULT_SETTINGS.lastEditDateStr;
        } else {
          this.plugin.settings.lastEditDateStr = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc("Format used in inserting / editing dates.").addText(
      (text) => text.setPlaceholder("default: YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.dateFormat = DEFAULT_SETTINGS.dateFormat;
        } else {
          this.plugin.settings.dateFormat = input;
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h1", { text: "Inserting Header" });
    new import_obsidian.Setting(containerEl).setName("Header line").addText(
      (text) => text.setPlaceholder("default: ___").setValue(this.plugin.settings.separationLineStr).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.separationLineStr = DEFAULT_SETTINGS.separationLineStr;
        } else {
          this.plugin.settings.separationLineStr = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Top level content line").setDesc("To indicate content to always appear at the top").addText(
      (text) => text.setPlaceholder("default: +++").setValue(this.plugin.settings.topLevelLine).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.topLevelLine = DEFAULT_SETTINGS.topLevelLine;
        } else {
          this.plugin.settings.topLevelLine = input;
        }
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/assets.ts
var import_obsidian3 = require("obsidian");

// src/modals.ts
var import_obsidian2 = require("obsidian");
var TemplateSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.path.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.path.substring(this.settings.templateFolderPath.length, item.path.length - 3) });
  }
  // 选择时触发
  async onChooseSuggestion(item, evt) {
    let content = await this.app.vault.read(item);
    this.editor.replaceRange(content, { line: 0, ch: 0 });
    let oldContent = this.editor.getValue();
    let newContent = oldContent.replace(new RegExp("{{date}}", "gi"), (0, import_obsidian2.moment)().format(this.settings.dateFormat)).replace("people: ", `people:
  - ${this.settings.username}`).replace("createdBy: ", `createdBy: ${this.settings.username}`);
    await this.app.vault.modify(this.app.workspace.getActiveFile(), newContent);
    return;
    const peopleFiles = this.app.vault.getMarkdownFiles().filter(
      (file) => file.path.startsWith(this.settings.peopleFolderPath)
    );
    const people = peopleFiles.map((file) => file.basename);
    const lines = this.editor.getValue().split("\n");
    let assignedToLine = -1;
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].startsWith("assignedTo:")) {
        assignedToLine = i;
        break;
      }
    }
    if (assignedToLine >= 0) {
      const modal = new PeopleSuggestionModal(
        this.editor,
        this.settings,
        people,
        // 用 people 而不是模板文件名
        { line: assignedToLine, ch: lines[assignedToLine].length }
      );
      modal.open();
    }
  }
};
var PeopleSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList, insertLocation) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
    this.insertLocation = insertLocation;
    this.setPlaceholder("Who are you assigning this to?");
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.toLowerCase().includes(query.toLowerCase())).sort();
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  async onChooseSuggestion(item, evt) {
    const oldContent = this.editor.getValue();
    const newContent = oldContent.replace("assignedTo: ", `assignedTo:
  - ${item}`);
    await this.app.vault.modify(this.app.workspace.getActiveFile(), newContent);
  }
};

// src/assets.ts
function updateLastEditDate(editor, settings) {
  let lineIndex = 0;
  while (editor.getLine(lineIndex)) {
    let line = editor.getLine(lineIndex);
    if (line.startsWith(settings.lastEditDateStr)) {
      if (editor.getCursor().line != lineIndex) {
        if (line.length > settings.lastEditDateStr.length + settings.dateFormat.length) {
          editor.replaceRange(
            (0, import_obsidian3.moment)().format(settings.dateFormat),
            { line: lineIndex, ch: settings.lastEditDateStr.length + 1 },
            { line: lineIndex, ch: settings.lastEditDateStr.length + settings.dateFormat.length + 1 }
          );
        } else {
          editor.replaceRange(
            (0, import_obsidian3.moment)().format(settings.dateFormat),
            { line: lineIndex, ch: settings.lastEditDateStr.length + 1 },
            { line: lineIndex, ch: line.length }
          );
        }
      }
      break;
    }
    lineIndex++;
  }
}
function openTemplateSuggestionModal(app2, settings) {
  const files = app2.vault.getMarkdownFiles();
  const templateFiles = files.filter((file) => file.path.startsWith(settings.templateFolderPath));
  new TemplateSuggestionModal(app2.workspace.activeEditor.editor, settings, templateFiles).open();
}

// src/autotext.ts
var import_obsidian4 = require("obsidian");
function disableAutoText(app2, editor, settings) {
  var _a;
  let dataviewLineTrack = 0;
  let topLevelLineTrack = 0;
  let isTemplate = false;
  const metadata = (_a = app2.metadataCache.getFileCache(this.app.workspace.getActiveFile())) == null ? void 0 : _a.frontmatter;
  if (metadata && metadata.hasOwnProperty("people")) {
    isTemplate = true;
  }
  if (editor.getLine(editor.getCursor().line).length === 0) {
    return true;
  }
  for (let index = 0; index < editor.getCursor().line; index++) {
    const line = editor.getLine(index);
    if (dataviewLineTrack >= 2 && topLevelLineTrack == 1) {
      if (!(line == "")) {
        return true;
      }
    }
    if (line.startsWith(settings.topLevelLine)) {
      topLevelLineTrack++;
    }
    if (line.startsWith(settings.dataviewHeaderLine)) {
      dataviewLineTrack++;
    }
  }
  if (dataviewLineTrack <= 1 || !isTemplate || topLevelLineTrack == 0) {
    return true;
  }
  return false;
}
function generateAutoText(app2, editor, settings) {
  if (!disableAutoText(app2, editor, settings)) {
    editor.replaceRange(
      "\n\n" + settings.separationLineStr + "\n" + (0, import_obsidian4.moment)().format(settings.dateFormat) + " " + settings.username,
      { line: editor.getCursor().line - 1, ch: editor.getLine(editor.getCursor().line - 1).length }
    );
    editor.replaceRange(
      "\n",
      { line: editor.getCursor().line + 1, ch: 0 }
    );
  }
}

// main.ts
var TextPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.isUpdating = false;
  }
  // 防止递归
  // obsidian 启动时激活
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TextPluginSettingTab(this.app, this));
    this.registerEvent(this.app.metadataCache.on("changed", async (file, data, cache) => {
      var _a;
      let path = file.path;
      let archivedFolderName = "_Archived";
      let dir = path.split("/");
      if (((_a = cache.frontmatter) == null ? void 0 : _a.status) === "archived") {
        if (path.includes(archivedFolderName)) {
          return;
        }
        const archivedFolderPath = `${dir[0]}/${archivedFolderName}/${(0, import_obsidian5.moment)().format("YYYY")}/${(0, import_obsidian5.moment)().format("MM")}`;
        if (!await this.app.vault.adapter.exists(archivedFolderPath)) {
          await this.app.vault.createFolder(archivedFolderPath);
        }
        this.app.fileManager.renameFile(this.app.vault.getAbstractFileByPath(path), `${archivedFolderPath}/${dir[dir.length - 1]}`);
      }
    }));
    setTimeout(() => {
      this.registerEvent(this.app.vault.on("create", (file) => {
        setTimeout(async () => {
          let content = await this.app.vault.read(file);
          if (file.path.endsWith(".md") && content == "") {
            openTemplateSuggestionModal(this.app, this.settings);
          }
        }, 500);
      }));
    }, 1e3);
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        const file = this.app.workspace.getActiveFile();
        if (!editor || !file)
          return;
        if (this.isUpdating)
          return;
        this.isUpdating = true;
        try {
          if (!file.path.startsWith(this.settings.templateFolderPath)) {
            updateLastEditDate(editor, this.settings);
          }
          generateAutoText(this.app, editor, this.settings);
        } finally {
          this.isUpdating = false;
        }
      })
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
