/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  username: "placeholder",
  tagSymb: "~",
  lastEditDateStr: "updatedDate:",
  dateFormat: "YYYY-MM-DD",
  peopleFolderPath: "All/Collaborators/",
  separationLineStr: "___",
  topLevelLine: "+++",
  templateFolderPath: "All/Templates/",
  dataviewHeaderLine: "---",
  templateDetectionStr: "type: task",
  peopleStr: "people:"
};
var TextPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Tagging & Adding People" });
    new import_obsidian.Setting(containerEl).setName("Username").setDesc("How other users will identify you in tags, notices, etc.").addText(
      (text) => text.setPlaceholder("default: user").setValue(this.plugin.settings.username).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.username = DEFAULT_SETTINGS.username;
        } else {
          this.plugin.settings.username = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Tag indicator").setDesc("A character/string you and other users will use to tag each other.").addText(
      (text) => text.setPlaceholder("default: @").setValue(this.plugin.settings.tagSymb).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.tagSymb = DEFAULT_SETTINGS.tagSymb;
        } else {
          this.plugin.settings.tagSymb = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Name list file").setDesc("File that stores all candidates for names to be added").addText(
      (text) => text.setPlaceholder("default: collaborator").setValue(this.plugin.settings.peopleFolderPath).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.peopleFolderPath = DEFAULT_SETTINGS.peopleFolderPath;
        } else {
          this.plugin.settings.peopleFolderPath = input;
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h1", { text: "Inserting & Updating Edit Dates" });
    new import_obsidian.Setting(containerEl).setName("Keyword: latest edit date").addText(
      (text) => text.setPlaceholder("default: updatedDate:").setValue(this.plugin.settings.lastEditDateStr).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.lastEditDateStr = DEFAULT_SETTINGS.lastEditDateStr;
        } else {
          this.plugin.settings.lastEditDateStr = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc("Format used in inserting / editing dates.").addText(
      (text) => text.setPlaceholder("default: YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.dateFormat = DEFAULT_SETTINGS.dateFormat;
        } else {
          this.plugin.settings.dateFormat = input;
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h1", { text: "Inserting Header" });
    new import_obsidian.Setting(containerEl).setName("Header line").addText(
      (text) => text.setPlaceholder("default: ___").setValue(this.plugin.settings.separationLineStr).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.separationLineStr = DEFAULT_SETTINGS.separationLineStr;
        } else {
          this.plugin.settings.separationLineStr = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Top level content line").setDesc("To indicate content to always appear at the top").addText(
      (text) => text.setPlaceholder("default: +++").setValue(this.plugin.settings.topLevelLine).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.topLevelLine = DEFAULT_SETTINGS.topLevelLine;
        } else {
          this.plugin.settings.topLevelLine = input;
        }
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/assets.ts
var import_obsidian3 = require("obsidian");

// src/modals.ts
var import_obsidian2 = require("obsidian");
var TemplateSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.path.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.path.substring(this.settings.templateFolderPath.length, item.path.length - 3) });
  }
  // 选择时触发
  async onChooseSuggestion(item, evt) {
    let content = await this.app.vault.read(item);
    this.editor.replaceRange(content, { line: 0, ch: 0 });
    setTimeout(async () => {
      let oldContent = this.editor.getValue();
      let newContent = oldContent.replace(new RegExp("{{date}}", "gi"), (0, import_obsidian2.moment)().format(this.settings.dateFormat));
      await this.app.vault.modify(this.app.workspace.getActiveFile(), newContent);
      initTemplatePpl(this.app, this.editor, this.settings);
    });
  }
};
var StatusSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList, lineNum) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
    this.lineNum = lineNum;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.toLowerCase().includes(query.toLowerCase())).sort();
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  async onChooseSuggestion(item, evt) {
    this.editor.replaceRange(
      "status: " + item,
      { line: this.lineNum, ch: 0 },
      { line: this.lineNum, ch: this.editor.getLine(this.lineNum).length }
    );
    if (item == "archived") {
      let path = this.app.workspace.getActiveFile().path;
      let dir = path.split("/");
      if (!await this.app.vault.adapter.exists(`${dir[0]}/_Archived/${(0, import_obsidian2.moment)().format("YYYY")}`)) {
        await this.app.vault.createFolder(`${dir[0]}/_Archived/${(0, import_obsidian2.moment)().format("YYYY")}`);
      }
      this.app.fileManager.renameFile(this.app.vault.getAbstractFileByPath(path), `${dir[0]}/_Archived/${(0, import_obsidian2.moment)().format("YYYY")}/${dir[dir.length - 1]}`);
    }
  }
};
var PeopleSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList, insertLocation) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
    this.insertLocation = insertLocation;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.toLowerCase().includes(query.toLowerCase())).sort();
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  onChooseSuggestion(item, evt) {
    this.editor.replaceRange(
      item,
      { line: this.insertLocation.line, ch: this.insertLocation.ch - 1 },
      { line: this.insertLocation.line, ch: this.insertLocation.ch }
    );
    updateLastEditDate(this.editor, this.settings);
    setTimeout(() => {
      this.editor.setCursor({
        line: this.insertLocation.line,
        ch: this.insertLocation.ch + item.length - 1
      }, 100);
    });
    if (this.editor.getLine(this.insertLocation.line).startsWith("assignedTo: ")) {
      assignedToUpdate(this.editor, this.settings, item);
    }
  }
};

// src/assets.ts
function updateLastEditDate(editor, settings) {
  let lineIndex = 0;
  while (editor.getLine(lineIndex)) {
    let line = editor.getLine(lineIndex);
    if (line.startsWith(settings.lastEditDateStr)) {
      if (editor.getCursor().line != lineIndex) {
        if (line.length > settings.lastEditDateStr.length + settings.dateFormat.length) {
          editor.replaceRange(
            (0, import_obsidian3.moment)().format(settings.dateFormat),
            { line: lineIndex, ch: settings.lastEditDateStr.length + 1 },
            { line: lineIndex, ch: settings.lastEditDateStr.length + settings.dateFormat.length + 1 }
          );
        } else {
          editor.replaceRange(
            (0, import_obsidian3.moment)().format(settings.dateFormat),
            { line: lineIndex, ch: settings.lastEditDateStr.length + 1 },
            { line: lineIndex, ch: line.length }
          );
        }
      }
      break;
    }
    lineIndex++;
  }
}
async function openPeopleSuggestionModal(app2, settings) {
  let editor = app2.workspace.activeEditor.editor;
  let location = editor.getCursor();
  const files = app2.vault.getMarkdownFiles();
  const people = [];
  for (let index = 0; index < files.length; index++) {
    if (files[index].path.startsWith(settings.peopleFolderPath)) {
      people.push(files[index].basename);
    }
  }
  editor.setCursor({ line: editor.getCursor().line - 1, ch: 0 });
  new PeopleSuggestionModal(app2.workspace.activeEditor.editor, settings, people, location).open();
}
async function openStatusSuggestionModal(app2, settings, lineNum) {
  const files = app2.vault.getMarkdownFiles().filter((file) => file.path.startsWith("All/status"));
  const statusFile = files[0];
  const statusOptions = (await app2.vault.read(statusFile)).split("\n");
  new StatusSuggestionModal(app2.workspace.activeEditor.editor, settings, statusOptions, lineNum).open();
}
function openTemplateSuggestionModal(app2, settings) {
  const files = app2.vault.getMarkdownFiles();
  const templateFiles = [];
  for (let index = 0; index < files.length; index++) {
    if (files[index].path.startsWith(settings.templateFolderPath)) {
      templateFiles.push(files[index]);
    }
  }
  new TemplateSuggestionModal(app2.workspace.activeEditor.editor, settings, templateFiles).open();
}
function initTemplatePpl(app2, editor, settings) {
  for (let index = 0; index < 20; index++) {
    if (editor.getLine(index).startsWith("people:")) {
      editor.replaceRange(
        `~${settings.username}`,
        { line: index, ch: 8 }
      );
    }
    if (editor.getLine(index).startsWith("createdBy:")) {
      editor.replaceRange(
        `~${settings.username}`,
        { line: index, ch: 11 }
      );
    }
  }
}
function assignedToUpdate(editor, settings, name) {
  let lineIndex = 0;
  while (editor.getLine(lineIndex)) {
    let line = editor.getLine(lineIndex);
    if (line.startsWith(settings.peopleStr) && !line.contains(name)) {
      editor.replaceRange(
        ",~" + name,
        { line: lineIndex, ch: editor.getLine(lineIndex).length }
      );
      break;
    }
    lineIndex++;
  }
}

// src/autotext.ts
var import_obsidian4 = require("obsidian");
function disableAutoText(app2, editor, settings) {
  var _a;
  let dataviewLineTrack = 0;
  let topLevelLineTrack = 0;
  let isTemplate = false;
  const metadata = (_a = this.app.metadataCache.getFileCache(this.app.workspace.getActiveFile())) == null ? void 0 : _a.frontmatter;
  if (metadata.hasOwnProperty("people")) {
    isTemplate = true;
  }
  if (!(editor.getLine(editor.getCursor().line) == "")) {
    return true;
  }
  for (let index = 0; index < editor.getCursor().line; index++) {
    let line = editor.getLine(index);
    if (dataviewLineTrack >= 2 && topLevelLineTrack == 1) {
      if (!(line == "")) {
        return true;
      }
    }
    if (line.startsWith(settings.topLevelLine)) {
      topLevelLineTrack++;
    }
    if (line.startsWith(settings.dataviewHeaderLine)) {
      dataviewLineTrack++;
    }
  }
  if (dataviewLineTrack <= 1 || !isTemplate || topLevelLineTrack == 0) {
    return true;
  }
  return false;
}
function generateAutoText(app2, editor, settings) {
  if (!disableAutoText(app2, editor, settings)) {
    editor.replaceRange(
      "\n\n" + settings.separationLineStr + "\n" + (0, import_obsidian4.moment)().format(settings.dateFormat) + " " + settings.username,
      { line: editor.getCursor().line - 1, ch: editor.getLine(editor.getCursor().line - 1).length }
    );
    editor.replaceRange(
      "\n",
      { line: editor.getCursor().line + 1, ch: 0 }
    );
  }
}

// main.ts
var TextPlugin = class extends import_obsidian5.Plugin {
  // obsidian 启动时激活
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TextPluginSettingTab(this.app, this));
    this.registerDomEvent(document, "keypress", (evt) => {
      if (!this.app.workspace.getActiveFile().path.startsWith(this.settings.templateFolderPath)) {
        updateLastEditDate(this.app.workspace.activeEditor.editor, this.settings);
      }
    });
    this.registerEvent(this.app.workspace.on("editor-paste", () => {
      if (!this.app.workspace.getActiveFile().path.startsWith(this.settings.templateFolderPath)) {
        updateLastEditDate(this.app.workspace.activeEditor.editor, this.settings);
      }
    }));
    const ribbonIconInsertDate = this.addRibbonIcon("calendar", "Insert Date", (evt) => {
      let editor = this.app.workspace.activeEditor.editor;
      editor.replaceRange((0, import_obsidian5.moment)().format(this.settings.dateFormat), editor.getCursor());
      updateLastEditDate(editor, this.settings);
    });
    this.registerEvent(this.app.metadataCache.on("changed", async (file, data, cache) => {
      var _a;
      let path = file.path;
      let dir = path.split("/");
      if (((_a = cache.frontmatter) == null ? void 0 : _a.status) === "archived") {
        if (!await this.app.vault.adapter.exists(`${dir[0]}/_Archived/${(0, import_obsidian5.moment)().format("YYYY")}`)) {
          await this.app.vault.createFolder(`${dir[0]}/_Archived/${(0, import_obsidian5.moment)().format("YYYY")}`);
        }
        this.app.fileManager.renameFile(this.app.vault.getAbstractFileByPath(path), `${dir[0]}/_Archived/${(0, import_obsidian5.moment)().format("YYYY")}/${dir[dir.length - 1]}`);
      }
    }));
    this.registerEvent(this.app.workspace.on("editor-change", (editor) => {
      const key = editor.getLine(editor.getCursor().line).charAt(editor.getCursor().ch - 1);
      if (key.localeCompare(this.settings.tagSymb) == 0) {
        openPeopleSuggestionModal(this.app, this.settings);
      }
    }));
    this.registerDomEvent(document, "keypress", (evt) => {
      generateAutoText(this.app, this.app.workspace.activeEditor.editor, this.settings);
    });
    this.registerEvent(this.app.workspace.on("editor-paste", () => {
      generateAutoText(this.app, this.app.workspace.activeEditor.editor, this.settings);
    }));
    setTimeout(() => {
      this.registerEvent(this.app.vault.on("create", (file) => {
        setTimeout(async () => {
          let content = await this.app.vault.read(file);
          if (file.path.endsWith(".md") && content == "") {
            openTemplateSuggestionModal(this.app, this.settings);
          }
        }, 100);
      }));
    }, 100);
    this.registerDomEvent(document, "click", async (evt) => {
      const editor = this.app.workspace.activeEditor.editor;
      if (editor.getLine(editor.getCursor().line).contains("status:")) {
        await openStatusSuggestionModal(this.app, this.settings, editor.getCursor().line);
        editor.setCursor({ line: editor.getCursor().line - 1, ch: 0 });
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3MudHMiLCAic3JjL2Fzc2V0cy50cyIsICJzcmMvbW9kYWxzLnRzIiwgInNyYy9hdXRvdGV4dC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE5vdGljZSwgUGx1Z2luLCBtb21lbnQsIFRGaWxlLCBDb21tYW5kIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgVGV4dFBsdWdpblNldHRpbmdUYWIsIFRleHRQbHVnaW5TZXR0aW5ncywgREVGQVVMVF9TRVRUSU5HUyB9IGZyb20gJy4vc3JjL3NldHRpbmdzJztcbmltcG9ydCB7IHVwZGF0ZUxhc3RFZGl0RGF0ZSwgb3BlblBlb3BsZVN1Z2dlc3Rpb25Nb2RhbCwgb3BlblRlbXBsYXRlU3VnZ2VzdGlvbk1vZGFsLCBvcGVuU3RhdHVzU3VnZ2VzdGlvbk1vZGFsIH0gZnJvbSAnLi9zcmMvYXNzZXRzJ1xuaW1wb3J0IHsgZ2VuZXJhdGVBdXRvVGV4dCB9IGZyb20gJy4vc3JjL2F1dG90ZXh0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IFRleHRQbHVnaW5TZXR0aW5ncztcblxuXHQvLyBvYnNpZGlhbiBcdTU0MkZcdTUyQThcdTY1RjZcdTZGQzBcdTZEM0JcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cblx0XHQvLyBcdTUyQTBcdThGN0Qgc2V0dGluZ3NcblxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUZXh0UGx1Z2luU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG5cdFx0XG5cblxuXHRcdC8vIFx1NTI5Rlx1ODBGRFx1RkYxQVx1NjU4N1x1Njg2M1x1ODhBQlx1NjZGNFx1NjUzOVx1NjVGNlx1RkYwQ1x1ODFFQVx1NTJBOFx1NjZGNFx1NjVCMFx1NjcwMFx1OEZEMVx1NjZGNFx1NjUzOVx1NjVFNVx1NjcxRlxuXHRcdC8vXHQtIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkhLnBhdGggXHU4RkQ0XHU1NkRFXHU1RjUzXHU1MjREXHU2MjUzXHU1RjAwXHU2NTg3XHU2ODYzXHU3Njg0IHBhdGggKGUuZy4gQWxsL2ludGVybi90cmF2ZWxQbGFubmVyLm1kKVxuXHRcdC8vXHQtIHRoaXMuc2V0dGluZ3MgXHU0RkUxXHU2MDZGXHU1M0VGXHU0RUU1XHU1NzI4IC4vc3JjL3NldHRpbmdzLnRzIFx1NjI3RVx1NTIzMFxuXHRcdC8vXHQtIHVwZGF0ZUxhc3RFZGl0RGF0ZSgpIFx1NTNFRlx1NTcyOCAuL3NyYy9hc3NldHMudHMgXHU2MjdFXHU1MjMwXG5cdFx0XG5cdFxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2tleXByZXNzJywgKGV2dDogS2V5Ym9hcmRFdmVudCkgPT4geyAvLyBcdTY3MDlcdTRFRkJcdTRGNTVcdTY1MzlcdTUyQThcdTY1RjZcdTg5RTZcdTUzRDFcblx0XHRcdGlmICghdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSEucGF0aC5zdGFydHNXaXRoKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVGb2xkZXJQYXRoKSkgeyAvLyBcdTc4NkVcdTRGRERcdTVGNTNcdTUyNERcdTY1ODdcdTY4NjNcdTRFMERcdTY2MkYgdGVtcGxhdGUgXHU2NTg3XHU2ODYzXG5cdFx0XHRcdHVwZGF0ZUxhc3RFZGl0RGF0ZSh0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yIS5lZGl0b3IhLCB0aGlzLnNldHRpbmdzKTsgLy8gXHU2NkY0XHU2NTM5XHU2NUU1XHU2NzFGXG5cdFx0XHR9XG5cdFx0fSk7XG5cblxuXG5cblx0XHQvLyBcdTUyOUZcdTgwRkRcdUZGMUFcdTU3MjhcdTY1ODdcdTY4NjNcdTdDOThcdThEMzRcdTUxODVcdTVCQjlcdTY1RjZcdUZGMENcdTgxRUFcdTUyQThcdTY2RjRcdTY1QjBcdTY3MDBcdThGRDFcdTY2RjRcdTY1MzlcdTY1RTVcdTY3MUZcblxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2VkaXRvci1wYXN0ZScsICgpID0+IHsgLy8gXHU2NzA5XHU0RUZCXHU0RjU1XHU3Qzk4XHU4RDM0XHU2NUY2XHU4OUU2XHU1M0QxXG5cdFx0XHRpZiAoIXRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkhLnBhdGguc3RhcnRzV2l0aCh0aGlzLnNldHRpbmdzLnRlbXBsYXRlRm9sZGVyUGF0aCkpIHsgLy8gXHU3ODZFXHU0RkREXHU1RjUzXHU1MjREXHU2NTg3XHU2ODYzXHU0RTBEXHU2NjJGIHRlbXBsYXRlIFx1NjU4N1x1Njg2M1xuXHRcdFx0XHR1cGRhdGVMYXN0RWRpdERhdGUodGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvciEuZWRpdG9yISwgdGhpcy5zZXR0aW5ncyk7IC8vIFx1NjZGNFx1NjUzOVx1NjVFNVx1NjcxRlxuXHRcdFx0fVxuXHRcdH0pKTtcblxuXG5cblxuXHRcdC8vIFx1NTI5Rlx1ODBGRFx1RkYxQVx1NzBCOVx1NTFGQlx1NURFNlx1NURFNVx1NTE3N1x1NjgwRlx1NTZGRVx1NjgwN1x1NzZGNFx1NjNBNVx1NjNEMlx1NTE2NVx1NEVDQVx1NTkyOVx1NjVFNVx1NjcxRlxuXHRcdC8vXHQtIHRoaXMuYWRkUmliYm9uSWNvbigpIFx1NEYxQVx1NTcyOFx1NURFNlx1NURFNVx1NTE3N1x1NjgwRlx1NjVCMFx1NTJBMFx1NTZGRVx1NjgwNyAoXHU2QjY0XHU1MjlGXHU4MEZEXHU3NTI4XHU0RTg2IGNhbGVuZGFyIFx1NTZGRVx1NjgwNylcblx0XHQvL1x0LSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yIS5lZGl0b3IhIFx1OEZENFx1NTZERVx1NUY1M1x1NTI0RFx1NjU4N1x1Njg2M1x1NEY3Rlx1NzUyOFx1NzY4NCBlZGl0b3Jcblx0XHQvL1x0LSBlZGl0b3IucmVwbGFjZVJhbmdlKGNvbnRlbnQsIGVkaXRvci5nZXRDdXJzb3IoKSkgXHU1NzI4XHU1RjUzXHU1MjREXHU5RjIwXHU2ODA3XHU0RjREXHU3RjZFXHU2M0QyXHU1MTY1IGNvbnRlbnRcblxuXHRcdGNvbnN0IHJpYmJvbkljb25JbnNlcnREYXRlID0gdGhpcy5hZGRSaWJib25JY29uKCdjYWxlbmRhcicsICdJbnNlcnQgRGF0ZScsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGxldCBlZGl0b3IgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yIS5lZGl0b3IhO1xuXHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShtb21lbnQoKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5kYXRlRm9ybWF0KSwgZWRpdG9yLmdldEN1cnNvcigpKTsgLy8gXHU2M0QyXHU1MTY1XHU0RUNBXHU2NUU1XHU2NUU1XHU2NzFGXG5cdFx0XHR1cGRhdGVMYXN0RWRpdERhdGUoZWRpdG9yLCB0aGlzLnNldHRpbmdzKTsgLy8gXHU5ODdBXHU0RkJGXHU4MUVBXHU1MkE4XHU2NkY0XHU2NTM5XHU2NzAwXHU4RkQxXHU2NkY0XHU2NTM5XHU2NUU1XHU2NzFGXG5cdFx0fSk7XHRcblxuXHRcdC8vIFx1NTI5Rlx1ODBGRFx1RkYxQSBcdTc2RDFcdTU0MkNtZXRhZGF0YUNhY2hlXHU2NTM5XHU1M0Q4XG5cdFx0Ly8gY2FjaGUuZnJvbnRtYXR0ZXI/LnN0YXR1cyA9PT0gJ2FyY2hpdmVkJyBcblx0XHQvLyBcdTVGNTJcdTY4NjNcdTUyMzBcdTVGNTNcdTVFNzRcdTY1ODdcdTRFRjZcdTU5MzlcblxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLm9uKFwiY2hhbmdlZFwiLCBhc3luYyAoZmlsZSAsIGRhdGEsIGNhY2hlKSA9PiB7IC8vIG1ldGFkYXRhQ2FjaGVcdTY3MDlcdTY1MzlcdTUyQThcdTY1RjZcdTg5RTZcdTUzRDFcblx0XHRcdC8vIGxldCBwYXRoID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSEucGF0aDtcblx0XHRcdGxldCBwYXRoID0gZmlsZS5wYXRoXG5cdFx0XHRsZXQgZGlyOiBzdHJpbmdbXSA9IHBhdGguc3BsaXQoJy8nKTtcblx0XHRcdGlmIChjYWNoZS5mcm9udG1hdHRlcj8uc3RhdHVzID09PSAnYXJjaGl2ZWQnKSB7XG5cdFx0XHRcdGlmICghYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoYCR7ZGlyWzBdfS9fQXJjaGl2ZWQvJHttb21lbnQoKS5mb3JtYXQoJ1lZWVknKX1gKSApIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIoYCR7ZGlyWzBdfS9fQXJjaGl2ZWQvJHttb21lbnQoKS5mb3JtYXQoJ1lZWVknKX1gKVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUodGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpISwgYCR7ZGlyWzBdfS9fQXJjaGl2ZWQvJHttb21lbnQoKS5mb3JtYXQoJ1lZWVknKX0vJHtkaXJbZGlyLmxlbmd0aCAtIDFdfWApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fSkpO1xuXG5cdFx0Ly8gXHU1MjlGXHU4MEZEXHVGRjFBXHU5MDFBXHU4RkM3IFx1RkY1RSBcdTY3NjVcdTYzRDJcdTUxNjVcdTRFQkFcdTU0MERcblx0XHQvL1x0LSBvcGVuUGVvcGxlU3VnZ2VzdGlvbk1vZGFsKCkgXHU1M0VGXHU1NzI4IC4vc3JjL2Fzc2V0cy50cyBcdTYyN0VcdTUyMzBcblxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2VkaXRvci1jaGFuZ2UnLCAoZWRpdG9yOiBFZGl0b3IpID0+IHsgLy8gXHU2NTg3XHU2ODYzXHU2NzA5XHU2NTM5XHU1MkE4XHU2NUY2XHU4OUU2XHU1M0QxXG5cdFx0XHRjb25zdCBrZXkgPSBlZGl0b3IuZ2V0TGluZShlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSkuY2hhckF0KGVkaXRvci5nZXRDdXJzb3IoKS5jaCAtIDEpOyAvLyBcdTYzRDBcdTUzRDZcdTY3MDBcdThGRDFcdThGOTNcdTUxNjVcdTc2ODRcdTVCNTdcdTZCQ0Rcblx0XHRcdGlmIChrZXkubG9jYWxlQ29tcGFyZSh0aGlzLnNldHRpbmdzLnRhZ1N5bWIpID09IDApIHsgLy8gXHU1OTgyXHU2NzlDXHU2NzAwXHU4RkQxXHU4RjkzXHU1MTY1XHU2NjJGIFx1RkY1RVxuXHRcdFx0XHRvcGVuUGVvcGxlU3VnZ2VzdGlvbk1vZGFsKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzKTsgLy8gXHU0RUJBXHU1NDBEXHU5MDA5XHU2MkU5XHU3QTk3XHU1M0UzXHU1RjM5XHU1MUZBXG5cdFx0XHR9IFxuXHRcdH0pKTtcblx0XHRcblxuXG5cblx0XHQvLyBcdTUyOUZcdTgwRkRcdUZGMUFcdTY2RjRcdTY1MzlcdTYyMTZcdTdDOThcdThEMzRcdTY1RjZcdUZGMENcdTYzRDJcdTUxNjVcdTY2RjRcdTY1MzkgaGVhZGVyIFx1RkYwOFx1NTNFQVx1NTcyOCB0eXBlXHVGRjFBdGFzayBcdTY1ODdcdTY4NjNcdTc1MUZcdTY1NDhcdUZGMDlcblx0XHQvL1x0Z2VuZXJhdGVBdXRvVGV4dCgpIFx1NTNFRlx1NTcyOCAuL3NyYy9hdXRvdGV4dC50cyBcdTYyN0VcdTUyMzBcblxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2tleXByZXNzJywgKGV2dDogS2V5Ym9hcmRFdmVudCkgPT4geyAvLyBcdTY2RjRcdTY1MzlcdTY1RjZcblx0XHRcdGdlbmVyYXRlQXV0b1RleHQodGhpcy5hcHAsIHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3IhLmVkaXRvciEsIHRoaXMuc2V0dGluZ3MpO1xuXHRcdH0pO1xuXHRcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItcGFzdGUnLCAoKSA9PiB7IC8vIFx1N0M5OFx1OEQzNFx1NjVGNlxuXHRcdFx0Z2VuZXJhdGVBdXRvVGV4dCh0aGlzLmFwcCwgdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvciEuZWRpdG9yISwgdGhpcy5zZXR0aW5ncyk7XG5cdFx0fSkpO1xuXG5cblxuXG5cdFx0Ly8gXHU1MjlGXHU4MEZEXHVGRjFBXHU1MjFCXHU1RUZBXHU2NTg3XHU0RUY2XHU2NUY2XHVGRjBDXHU4MUVBXHU1MkE4XHU2M0QyXHU1MTY1dGVtcGxhdGVcblx0XHQvL1x0LSBzZXRUaW1lb3V0IFx1NzUyOFx1Njc2NVx1OTYzMlx1NkI2MiBvYnNpZGlhbiBcdTU0MkZcdTUyQThcdTY1RjZcdTg5RTZcdTUzRDFcblx0XHQvL1x0LSBvcGVuVGVtcGxhdGVTdWdnZXN0aW9uTW9kYWwgXHU1M0VGXHU1NzI4IC4vc3JjL2Fzc2V0cy50cyBcdTYyN0VcdTUyMzBcblxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLnZhdWx0Lm9uKCdjcmVhdGUnLCAoZmlsZTogVEZpbGUpID0+IHsgLy8gXHU1MjFCXHU1RUZBXHU2NTg3XHU2ODYzXHU2NUY2XHU4OUU2XHU1M0QxXG5cdFx0XHRcdHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTsgLy8gXHU2M0QwXHU1M0Q2XHU2NTg3XHU2ODYzXHU1MTg1XHU1QkI5XG5cdFx0XHRcdFx0aWYgKGZpbGUucGF0aC5lbmRzV2l0aCgnLm1kJykgJiYgY29udGVudCA9PSBcIlwiKSB7IC8vIFx1Nzg2RVx1OEJBNFx1NTIxQlx1NUVGQVx1NzY4NFx1NjYyRiBtZCBcdTY1ODdcdTY4NjNcdUZGMENcdTVFNzZcdTRFMTRcdTRFM0FcdTdBN0FcdTY1ODdcdTY4NjNcblx0XHRcdFx0XHRcdG9wZW5UZW1wbGF0ZVN1Z2dlc3Rpb25Nb2RhbCh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncyk7IC8vIFx1NUYzOVx1NTFGQSB0ZW1wbGF0ZSBcdTkwMDlcdTYyRTlcdTdBOTdcdTUzRTNcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHR9KSk7XG5cdFx0fSwgMTAwKTtcblxuXHRcblxuXG5cdFx0XG5cdFx0Ly8gXHU1MjlGXHU4MEZEXHVGRjFBXHU4MUVBXHU1MkE4XHU1RjM5XHU1MUZBIHN0YXR1cyBcdTkwMDlcdTYyRTlcdTdBOTdcdTUzRTNcblx0XHQvLyAtIG9wZW5TdGF0dXNTdWdnZXN0aW9uTW9kYWwgXHU1M0VGXHU1NzI4IC4vc3JjL2Fzc2V0cy50cyBcdTYyN0VcdTUyMzBcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIGFzeW5jIChldnQ6IE1vdXNlRXZlbnQpID0+IHsgLy8gXHU0RUZCXHU0RjU1XHU3MEI5XHU1MUZCXHU2NUY2XHU4OUU2XHU1M0QxXG5cdFx0XHRcdGNvbnN0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3IhLmVkaXRvciE7XG5cdFx0XHRcdGlmIChlZGl0b3IuZ2V0TGluZShlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSkuY29udGFpbnMoJ3N0YXR1czonKSkgeyAvLyBcdTU5ODJcdTY3OUNcdTcwQjlcdTUxRkJcdTU3Mjggc3RhdHVzXHVGRjFBXHU1NDBDXHU0RTAwXHU4ODRDXG5cdFx0XHRcdGF3YWl0IG9wZW5TdGF0dXNTdWdnZXN0aW9uTW9kYWwodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MsIGVkaXRvci5nZXRDdXJzb3IoKS5saW5lKTsgLy8gXHU2MjUzXHU1RjAwIHN0YXR1cyBcdTkwMDlcdTYyRTlcdTdBOTdcdTUzRTNcblx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lIC0gMSwgY2g6IDAgfSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblxuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cblxuIiwgImltcG9ydCBUZXh0UGx1Z2luIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuLy8gXHU4QkJFXHU3RjZFXHU5MUNDXHU1M0VGXHU2NTM5XHU2NTcwXHU2MzZFXG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dFBsdWdpblNldHRpbmdzIHtcblx0dXNlcm5hbWU6IHN0cmluZzsgLy8gXHU0RTJBXHU0RUJBXHU1NDBEXHU3OUYwXG5cdHRhZ1N5bWI6IHN0cmluZzsgLy8gXHU4MUVBXHU1MkE4XHU2M0QyXHU1MTY1XHU0RUJBXHU1NDBEXHU2NUY2XHU2MjQwXHU3NTI4XHU3Njg0XHU1RkVCXHU2Mzc3XHU5NTJFXG5cdGxhc3RFZGl0RGF0ZVN0cjogc3RyaW5nOyAvLyBcdTRFRTNcdTg4NjhcdTY3MDBcdThGRDFcdTY2RjRcdTY1MzlcdTY1RTVcdTY3MUZcdTc2ODRcdTVCNTdcdTdCMjZcblx0ZGF0ZUZvcm1hdDogc3RyaW5nOyAvLyBcdTYzRDJcdTUxNjVcdTY1RTVcdTY3MUZcdTc2ODRcdTY4M0NcdTVGMEZcblx0cGVvcGxlRm9sZGVyUGF0aDogc3RyaW5nOyAvLyBcdTc1MjhcdTY3NjVcdTYzRDBcdTUzRDZcdTYyNDBcdTY3MDlcdTRFQkFcdTU0MERcdTc2ODRcdTY1ODdcdTRFRjZcdTU5MzkgcGF0aFxuXHRzZXBhcmF0aW9uTGluZVN0cjogc3RyaW5nOyAvLyBcdTgxRUFcdTUyQThcdTYzRDJcdTUxNjUgaGVhZGVyIFx1NjVGNlx1NzY4NCBoZWFkZXIgXHU1MjA2XHU3NTRDXHU3RUJGXG4gICAgdG9wTGV2ZWxMaW5lOiBzdHJpbmc7IC8vIHR5cGVcdUZGMUF0YXNrIFx1NjU4N1x1Njg2M1x1N0Y2RVx1OTg3Nlx1NTE4NVx1NUJCOVx1NzY4NFx1NTIwNlx1NzU0Q1x1N0VCRiBcdUZGMDhcdTRFRTVcdTRFMEFcdTUxODVcdTVCQjlcdTdGNkVcdTk4NzZcdUZGMDlcbiAgICB0ZW1wbGF0ZUZvbGRlclBhdGg6IHN0cmluZzsgLy8gXHU3NTI4XHU2NzY1XHU2M0QwXHU1M0Q2IHRlbXBsYXRlIFx1NzY4NFx1NjU4N1x1NEVGNlx1NTkzOSBwYXRoXG4gICAgZGF0YXZpZXdIZWFkZXJMaW5lOiBzdHJpbmc7XG4gICAgdGVtcGxhdGVEZXRlY3Rpb25TdHI6IHN0cmluZzsgLy8gXHU3NTI4XHU2NzY1XHU2OEMwXHU2RDRCXHU1RjUzXHU1MjREXHU2NTg3XHU2ODYzXHU2NjJGXHU0RTBEXHU2NjJGXHU2MzA3XHU1QjlBXHU3Njg0IHRlbXBsYXRlXG4gICAgcGVvcGxlU3RyOiBzdHJpbmc7IC8vIFx1NEVFM1x1ODg2OFx1NjU4N1x1Njg2M1x1NzZGOFx1NTE3M1x1NEVCQVx1NTQ1OFx1NzY4NFx1NUI1N1x1N0IyNlxufVxuXG4vLyBcdTlFRDhcdThCQTRcdThCQkVcdTdGNkVcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBhcnRpYWw8VGV4dFBsdWdpblNldHRpbmdzPiA9IHtcblx0dXNlcm5hbWU6IFwicGxhY2Vob2xkZXJcIixcblx0dGFnU3ltYjogXCJ+XCIsXG5cdGxhc3RFZGl0RGF0ZVN0cjogXCJ1cGRhdGVkRGF0ZTpcIixcblx0ZGF0ZUZvcm1hdDogXCJZWVlZLU1NLUREXCIsXG5cdHBlb3BsZUZvbGRlclBhdGg6IFwiQWxsL0NvbGxhYm9yYXRvcnMvXCIsXG5cdHNlcGFyYXRpb25MaW5lU3RyOiBcIl9fX1wiLFxuICAgIHRvcExldmVsTGluZTogXCIrKytcIixcbiAgICB0ZW1wbGF0ZUZvbGRlclBhdGg6IFwiQWxsL1RlbXBsYXRlcy9cIixcbiAgICBkYXRhdmlld0hlYWRlckxpbmU6IFwiLS0tXCIsXG4gICAgdGVtcGxhdGVEZXRlY3Rpb25TdHI6IFwidHlwZTogdGFza1wiLFxuICAgIHBlb3BsZVN0cjogXCJwZW9wbGU6XCIsXG59O1xuXG4vLyBcdTY0MkRcdTVFRkFcdThCQkVcdTdGNkUgaW50ZXJmYWNlXG5cbmV4cG9ydCBjbGFzcyBUZXh0UGx1Z2luU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogVGV4dFBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFRleHRQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogJ1RhZ2dpbmcgJiBBZGRpbmcgUGVvcGxlJyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdVc2VybmFtZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnSG93IG90aGVyIHVzZXJzIHdpbGwgaWRlbnRpZnkgeW91IGluIHRhZ3MsIG5vdGljZXMsIGV0Yy4nKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdkZWZhdWx0OiB1c2VyJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlcm5hbWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQubG9jYWxlQ29tcGFyZSgnJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlcm5hbWUgPSBERUZBVUxUX1NFVFRJTkdTLnVzZXJuYW1lITtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZXJuYW1lID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGFnIGluZGljYXRvcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnQSBjaGFyYWN0ZXIvc3RyaW5nIHlvdSBhbmQgb3RoZXIgdXNlcnMgd2lsbCB1c2UgdG8gdGFnIGVhY2ggb3RoZXIuJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignZGVmYXVsdDogQCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRhZ1N5bWIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQubG9jYWxlQ29tcGFyZSgnJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudGFnU3ltYiA9IERFRkFVTFRfU0VUVElOR1MudGFnU3ltYiE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWdTeW1iID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdOYW1lIGxpc3QgZmlsZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnRmlsZSB0aGF0IHN0b3JlcyBhbGwgY2FuZGlkYXRlcyBmb3IgbmFtZXMgdG8gYmUgYWRkZWQnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdkZWZhdWx0OiBjb2xsYWJvcmF0b3InKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wZW9wbGVGb2xkZXJQYXRoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmxvY2FsZUNvbXBhcmUoJycpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBlb3BsZUZvbGRlclBhdGggPSBERUZBVUxUX1NFVFRJTkdTLnBlb3BsZUZvbGRlclBhdGghO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGVvcGxlRm9sZGVyUGF0aCA9IGlucHV0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gxJywgeyB0ZXh0OiAnSW5zZXJ0aW5nICYgVXBkYXRpbmcgRWRpdCBEYXRlcyd9KTtcbiAgICAgICAgXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0tleXdvcmQ6IGxhdGVzdCBlZGl0IGRhdGUnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdkZWZhdWx0OiB1cGRhdGVkRGF0ZTonKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0RWRpdERhdGVTdHIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQubG9jYWxlQ29tcGFyZSgnJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFzdEVkaXREYXRlU3RyID0gREVGQVVMVF9TRVRUSU5HUy5sYXN0RWRpdERhdGVTdHIhO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFzdEVkaXREYXRlU3RyID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRGF0ZSBmb3JtYXQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Zvcm1hdCB1c2VkIGluIGluc2VydGluZyAvIGVkaXRpbmcgZGF0ZXMuJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignZGVmYXVsdDogWVlZWS1NTS1ERCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRhdGVGb3JtYXQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQubG9jYWxlQ29tcGFyZSgnJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGF0ZUZvcm1hdCA9IERFRkFVTFRfU0VUVElOR1MuZGF0ZUZvcm1hdCE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXRlRm9ybWF0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogJ0luc2VydGluZyBIZWFkZXInfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdIZWFkZXIgbGluZScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2RlZmF1bHQ6IF9fXycpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNlcGFyYXRpb25MaW5lU3RyKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmxvY2FsZUNvbXBhcmUoJycpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlcGFyYXRpb25MaW5lU3RyID0gREVGQVVMVF9TRVRUSU5HUy5zZXBhcmF0aW9uTGluZVN0ciE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZXBhcmF0aW9uTGluZVN0ciA9IGlucHV0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdUb3AgbGV2ZWwgY29udGVudCBsaW5lJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdUbyBpbmRpY2F0ZSBjb250ZW50IHRvIGFsd2F5cyBhcHBlYXIgYXQgdGhlIHRvcCcpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2RlZmF1bHQ6ICsrKycpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRvcExldmVsTGluZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5sb2NhbGVDb21wYXJlKCcnKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50b3BMZXZlbExpbmUgPSBERUZBVUxUX1NFVFRJTkdTLnRvcExldmVsTGluZSE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50b3BMZXZlbExpbmUgPSBpbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgIH0gICBcbn1cblxuIiwgImltcG9ydCB7IEFwcCwgRWRpdG9yLCBtb21lbnQsIFRGaWxlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IFRleHRQbHVnaW5TZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnXG5pbXBvcnQgeyBQZW9wbGVTdWdnZXN0aW9uTW9kYWwsIFRlbXBsYXRlU3VnZ2VzdGlvbk1vZGFsLCBTdGF0dXNTdWdnZXN0aW9uTW9kYWwgfSBmcm9tICcuL21vZGFscydcblxuLy8gXHU4MUVBXHU1MkE4XHU2NkY0XHU2NUIwXHU2NzAwXHU4RkQxXHU2NkY0XHU2NTM5XHU2NUU1XHU2NzFGXG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVMYXN0RWRpdERhdGUoZWRpdG9yOiBFZGl0b3IsIHNldHRpbmdzOiBUZXh0UGx1Z2luU2V0dGluZ3MpIHtcblx0bGV0IGxpbmVJbmRleCA9IDA7XG5cdHdoaWxlIChlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpKSB7XG5cdFx0bGV0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpO1xuXHRcdGlmIChsaW5lLnN0YXJ0c1dpdGgoc2V0dGluZ3MubGFzdEVkaXREYXRlU3RyKSkge1xuXHRcdFx0aWYgKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lICE9IGxpbmVJbmRleCkge1xuXHRcdFx0XHRpZiAobGluZS5sZW5ndGggPiBzZXR0aW5ncy5sYXN0RWRpdERhdGVTdHIubGVuZ3RoICsgc2V0dGluZ3MuZGF0ZUZvcm1hdC5sZW5ndGgpIHtcblx0XHRcdFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKFxuXHRcdFx0XHRcdFx0bW9tZW50KCkuZm9ybWF0KHNldHRpbmdzLmRhdGVGb3JtYXQpLFxuXHRcdFx0XHRcdFx0eyBsaW5lOiBsaW5lSW5kZXgsIGNoOiBzZXR0aW5ncy5sYXN0RWRpdERhdGVTdHIubGVuZ3RoICsgMSB9LFxuXHRcdFx0XHRcdFx0eyBsaW5lOiBsaW5lSW5kZXgsIGNoOiBzZXR0aW5ncy5sYXN0RWRpdERhdGVTdHIubGVuZ3RoICsgc2V0dGluZ3MuZGF0ZUZvcm1hdC5sZW5ndGggKyAxIH1cblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcblx0XHRcdFx0XHRcdG1vbWVudCgpLmZvcm1hdChzZXR0aW5ncy5kYXRlRm9ybWF0KSxcblx0XHRcdFx0XHRcdHsgbGluZTogbGluZUluZGV4LCBjaDogc2V0dGluZ3MubGFzdEVkaXREYXRlU3RyLmxlbmd0aCArIDEgfSxcblx0XHRcdFx0XHRcdHsgbGluZTogbGluZUluZGV4LCBjaDogbGluZS5sZW5ndGggfVxuXHRcdFx0XHRcdClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGxpbmVJbmRleCArKztcdFxuXHR9XG59XG5cbi8vIFx1NEVDRVx1NjU4N1x1NEVGNlx1NTkzOVx1NjNEMFx1NTNENlx1NjI0MFx1NjcwOVx1NEVCQVx1NTQwRFx1RkYwQ1x1NUU3Nlx1NUYzOVx1NTFGQVx1NEVCQVx1NTQwRFx1OTAwOVx1NjJFOVx1N0E5N1x1NTNFM1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb3BlblBlb3BsZVN1Z2dlc3Rpb25Nb2RhbChhcHA6IEFwcCwgc2V0dGluZ3M6IFRleHRQbHVnaW5TZXR0aW5ncykge1xuXHRsZXQgZWRpdG9yID0gYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3IhLmVkaXRvciE7XG5cdGxldCBsb2NhdGlvbiA9IGVkaXRvci5nZXRDdXJzb3IoKTtcblx0XG5cdGNvbnN0IGZpbGVzOiBURmlsZVtdID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcblx0Y29uc3QgcGVvcGxlOiBzdHJpbmdbXSA9IFtdO1xuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmlsZXMubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0aWYgKGZpbGVzW2luZGV4XS5wYXRoLnN0YXJ0c1dpdGgoc2V0dGluZ3MucGVvcGxlRm9sZGVyUGF0aCkpIHtcblx0XHRcdHBlb3BsZS5wdXNoKGZpbGVzW2luZGV4XS5iYXNlbmFtZSk7XG5cdFx0fVxuXHR9XG5cdGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSAtIDEsIGNoOiAwIH0pXG5cdG5ldyBQZW9wbGVTdWdnZXN0aW9uTW9kYWwoYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3IhLmVkaXRvciEsIHNldHRpbmdzLCBwZW9wbGUsIGxvY2F0aW9uKS5vcGVuKCk7XG59XG5cbi8vIFx1NUYzOVx1NTFGQVx1NjU4N1x1NEVGNiBzdGF0dXMgXHU5MDA5XHU2MkU5XHU3QTk3XHU1M0UzXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvcGVuU3RhdHVzU3VnZ2VzdGlvbk1vZGFsKGFwcDogQXBwLCBzZXR0aW5nczogVGV4dFBsdWdpblNldHRpbmdzLCBsaW5lTnVtOiBudW1iZXIpIHtcblx0Y29uc3QgZmlsZXM6IFRGaWxlW10gPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcigoZmlsZSkgPT4gZmlsZS5wYXRoLnN0YXJ0c1dpdGgoJ0FsbC9zdGF0dXMnKSk7XG5cdGNvbnN0IHN0YXR1c0ZpbGUgPSBmaWxlc1swXTtcblx0Y29uc3Qgc3RhdHVzT3B0aW9uczogc3RyaW5nW10gPSAoYXdhaXQgYXBwLnZhdWx0LnJlYWQoc3RhdHVzRmlsZSkpLnNwbGl0KCdcXG4nKTtcblx0bmV3IFN0YXR1c1N1Z2dlc3Rpb25Nb2RhbChhcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvciEuZWRpdG9yISwgc2V0dGluZ3MsIHN0YXR1c09wdGlvbnMsIGxpbmVOdW0pLm9wZW4oKTtcbn1cblxuLy8gXHU1RjM5XHU1MUZBXHU2NTg3XHU0RUY2IHRlbXBsYXRlIFx1OTAwOVx1NjJFOVx1N0E5N1x1NTNFM1xuXG5leHBvcnQgZnVuY3Rpb24gb3BlblRlbXBsYXRlU3VnZ2VzdGlvbk1vZGFsKGFwcDogQXBwLCBzZXR0aW5nczogVGV4dFBsdWdpblNldHRpbmdzKSB7XG4gICAgY29uc3QgZmlsZXM6IFRGaWxlW10gPSBhcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGNvbnN0IHRlbXBsYXRlRmlsZXM6IFRGaWxlW10gPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmlsZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGlmIChmaWxlc1tpbmRleF0ucGF0aC5zdGFydHNXaXRoKHNldHRpbmdzLnRlbXBsYXRlRm9sZGVyUGF0aCkpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlRmlsZXMucHVzaChmaWxlc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5ldyBUZW1wbGF0ZVN1Z2dlc3Rpb25Nb2RhbChhcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvciEuZWRpdG9yISwgc2V0dGluZ3MsIHRlbXBsYXRlRmlsZXMpLm9wZW4oKTtcbn1cblxuLy8gXHU1NzI4XHU2M0QyXHU1MTY1IHRlbXBsYXRlIFx1NjVGNlx1RkYwQ1x1ODFFQVx1NTJBOFx1NjZGNFx1NjUzOVx1NjVFNVx1NjcxRlx1NEVFNVx1NTNDQVx1NTIxQlx1NUVGQVx1ODAwNVx1N0I0OVx1NEZFMVx1NjA2RlxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFRlbXBsYXRlUHBsIChhcHA6IEFwcCwgZWRpdG9yOiBFZGl0b3IsIHNldHRpbmdzOiBUZXh0UGx1Z2luU2V0dGluZ3MpIHtcblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDIwOyBpbmRleCsrKSB7XG5cdFx0aWYgKGVkaXRvci5nZXRMaW5lKGluZGV4KS5zdGFydHNXaXRoKCdwZW9wbGU6JykpIHtcblx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXG5cdFx0XHRcdGB+JHtzZXR0aW5ncy51c2VybmFtZX1gLFxuXHRcdFx0XHR7IGxpbmU6IGluZGV4LCBjaDogOCB9XG5cdFx0XHQpXG5cdFx0fVxuXHRcdGlmIChlZGl0b3IuZ2V0TGluZShpbmRleCkuc3RhcnRzV2l0aCgnY3JlYXRlZEJ5OicpKSB7XG5cdFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKFxuXHRcdFx0XHRgfiR7c2V0dGluZ3MudXNlcm5hbWV9YCxcblx0XHRcdFx0eyBsaW5lOiBpbmRleCwgY2g6IDExIH1cblx0XHRcdClcblx0XHR9XG5cdH1cbn1cblxuLy8gXHU1NzI4IGFzc2lnbmVkVG9cdUZGMUFcdTUyNERcdTYzRDJcdTUxNjVcdTRFQkFcdTU0MERcdTY1RjZcdUZGMENcdTgxRUFcdTUyQThcdTY2RjRcdTY1QjAgcGVvcGxlXHVGRjFBXHU1MjREXHU3Njg0XHU1NDBEXHU1MzU1XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25lZFRvVXBkYXRlKGVkaXRvcjogRWRpdG9yLCBzZXR0aW5nczogVGV4dFBsdWdpblNldHRpbmdzLCBuYW1lOiBzdHJpbmcpIHtcblx0bGV0IGxpbmVJbmRleCA9IDA7XG5cdHdoaWxlIChlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpKSB7XG5cdFx0bGV0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpXG5cdFx0aWYgKGxpbmUuc3RhcnRzV2l0aChzZXR0aW5ncy5wZW9wbGVTdHIpICYmICFsaW5lLmNvbnRhaW5zKG5hbWUpKSB7XG5cdFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKFxuXHRcdFx0XHQnLH4nICsgbmFtZSxcblx0XHRcdFx0eyBsaW5lOiBsaW5lSW5kZXgsIGNoOiBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpLmxlbmd0aCB9XG5cdFx0XHQpXG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0bGluZUluZGV4ICsrO1xuXHR9XG5cdFxufSIsICJpbXBvcnQgeyBTdWdnZXN0TW9kYWwsIEVkaXRvciwgVEZpbGUsIEVkaXRvclBvc2l0aW9uLCBNb2RhbCwgQnV0dG9uQ29tcG9uZW50LCBtb21lbnQsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IHVwZGF0ZUxhc3RFZGl0RGF0ZSwgaW5pdFRlbXBsYXRlUHBsLCBhc3NpZ25lZFRvVXBkYXRlIH0gZnJvbSAnLi9hc3NldHMnO1xuaW1wb3J0IHsgVGV4dFBsdWdpblNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncyc7XG5cbi8vIHRlbXBsYXRlIFx1OTAwOVx1NjJFOVx1NUYzOVx1NTFGQVx1N0E5N1x1NTNFM1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8VEZpbGU+IHtcblxuXHRwcml2YXRlIGVkaXRvcjogRWRpdG9yO1xuXHRwcml2YXRlIHNldHRpbmdzOiBUZXh0UGx1Z2luU2V0dGluZ3M7XG5cdHByaXZhdGUgc3VnZ2VzdGlvbkxpc3Q6IFRGaWxlW107XG5cblx0Y29uc3RydWN0b3IoZWRpdG9yOiBFZGl0b3IsIHNldHRpbmdzOiBUZXh0UGx1Z2luU2V0dGluZ3MsIHN1Z2dlc3Rpb25MaXN0OiBURmlsZVtdKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLmVkaXRvciA9IGVkaXRvcjtcblx0XHR0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG5cdFx0dGhpcy5zdWdnZXN0aW9uTGlzdCA9IHN1Z2dlc3Rpb25MaXN0O1xuXHR9XG5cblx0Z2V0U3VnZ2VzdGlvbnMocXVlcnk6IHN0cmluZyk6IFRGaWxlW10ge1xuXHRcdHJldHVybiB0aGlzLnN1Z2dlc3Rpb25MaXN0LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5wYXRoLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSkpO1xuXHR9XG5cdHJlbmRlclN1Z2dlc3Rpb24oaXRlbTogVEZpbGUsIGVsOiBIVE1MRWxlbWVudCkge1xuXHRcdGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgdGV4dDogaXRlbS5wYXRoLnN1YnN0cmluZyh0aGlzLnNldHRpbmdzLnRlbXBsYXRlRm9sZGVyUGF0aC5sZW5ndGgsIGl0ZW0ucGF0aC5sZW5ndGggLSAzKSB9KVxuXHR9XG5cblx0Ly8gXHU5MDA5XHU2MkU5XHU2NUY2XHU4OUU2XHU1M0QxXG5cblx0YXN5bmMgb25DaG9vc2VTdWdnZXN0aW9uKGl0ZW06IFRGaWxlLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG5cdFx0bGV0IGNvbnRlbnQ6IHN0cmluZyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoaXRlbSk7XG5cdFx0dGhpcy5lZGl0b3IucmVwbGFjZVJhbmdlKGNvbnRlbnQsIHsgbGluZTogMCwgY2g6IDAgfSk7XG5cdFx0c2V0VGltZW91dChhc3luYyAoKSA9PiB7XG5cdFx0XHRsZXQgb2xkQ29udGVudCA9IHRoaXMuZWRpdG9yLmdldFZhbHVlKCk7XG5cdFx0XHRsZXQgbmV3Q29udGVudCA9IG9sZENvbnRlbnQucmVwbGFjZShuZXcgUmVnRXhwKCd7e2RhdGV9fScsICdnaScpLCBtb21lbnQoKS5mb3JtYXQodGhpcy5zZXR0aW5ncy5kYXRlRm9ybWF0KSk7IFxuXHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkhLCBuZXdDb250ZW50KTtcblx0XHRcdGluaXRUZW1wbGF0ZVBwbCh0aGlzLmFwcCwgdGhpcy5lZGl0b3IsIHRoaXMuc2V0dGluZ3MpO1xuXHRcdH0pO1xuXHR9XG59XG5cbi8vIFx1NjU4N1x1Njg2MyBzdGF0dXMgXHU5MDA5XHU2MkU5XHU1RjM5XHU1MUZBXHU3QTk3XHU1M0UzXG5cbmV4cG9ydCBjbGFzcyBTdGF0dXNTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8c3RyaW5nPiB7XG5cdHByaXZhdGUgZWRpdG9yOiBFZGl0b3I7XG5cdHByaXZhdGUgc2V0dGluZ3M6IFRleHRQbHVnaW5TZXR0aW5ncztcblx0cHJpdmF0ZSBzdWdnZXN0aW9uTGlzdDogc3RyaW5nW11cblx0cHJpdmF0ZSBsaW5lTnVtOiBudW1iZXI7XG5cdFxuXHRjb25zdHJ1Y3RvcihlZGl0b3I6IEVkaXRvciwgc2V0dGluZ3M6IFRleHRQbHVnaW5TZXR0aW5ncywgc3VnZ2VzdGlvbkxpc3Q6IHN0cmluZ1tdLCBsaW5lTnVtOiBudW1iZXIpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcblx0XHR0aGlzLnN1Z2dlc3Rpb25MaXN0ID0gc3VnZ2VzdGlvbkxpc3Q7XG5cdFx0dGhpcy5saW5lTnVtID0gbGluZU51bTtcblx0fVxuXG5cdGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuICh0aGlzLnN1Z2dlc3Rpb25MaXN0LmZpbHRlcigoaXRlbSkgPT4gaXRlbS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpKSkuc29ydCgpO1xuXHR9XG5cblx0cmVuZGVyU3VnZ2VzdGlvbihpdGVtOiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCkge1xuXHRcdGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgdGV4dDogaXRlbSB9KTtcblx0fVxuXG5cdGFzeW5jIG9uQ2hvb3NlU3VnZ2VzdGlvbihpdGVtOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcblx0XHR0aGlzLmVkaXRvci5yZXBsYWNlUmFuZ2UoXG5cdFx0XHQnc3RhdHVzOiAnICsgaXRlbSxcblx0XHRcdHsgbGluZTogdGhpcy5saW5lTnVtLCBjaDogMCB9LFxuXHRcdFx0eyBsaW5lOiB0aGlzLmxpbmVOdW0sIGNoOiB0aGlzLmVkaXRvci5nZXRMaW5lKHRoaXMubGluZU51bSkubGVuZ3RoIH1cblx0XHQpXG5cdFx0aWYgKGl0ZW0gPT0gJ2FyY2hpdmVkJykge1xuXHRcdFx0bGV0IHBhdGggPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpIS5wYXRoO1xuXHRcdFx0bGV0IGRpcjogc3RyaW5nW10gPSBwYXRoLnNwbGl0KCcvJyk7XG5cdFx0XHRpZiAoIWF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKGAke2RpclswXX0vX0FyY2hpdmVkLyR7bW9tZW50KCkuZm9ybWF0KCdZWVlZJyl9YCkgKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihgJHtkaXJbMF19L19BcmNoaXZlZC8ke21vbWVudCgpLmZvcm1hdCgnWVlZWScpfWApXG5cdFx0XHR9XG5cdFx0XHR0aGlzLmFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKSEsIGAke2RpclswXX0vX0FyY2hpdmVkLyR7bW9tZW50KCkuZm9ybWF0KCdZWVlZJyl9LyR7ZGlyW2Rpci5sZW5ndGggLSAxXX1gKTtcblx0XHR9XG5cdH1cbn1cblxuLy8gXHU0RUJBXHU1NDBEXHU5MDA5XHU2MkU5XHU1RjM5XHU1MUZBXHU3QTk3XHU1M0UzXG5cbmV4cG9ydCBjbGFzcyBQZW9wbGVTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8c3RyaW5nPiB7XG5cblx0cHJpdmF0ZSBlZGl0b3I6IEVkaXRvcjtcblx0cHJpdmF0ZSBzZXR0aW5nczogVGV4dFBsdWdpblNldHRpbmdzO1xuXHRwcml2YXRlIHN1Z2dlc3Rpb25MaXN0OiBzdHJpbmdbXTtcblx0cHJpdmF0ZSBpbnNlcnRMb2NhdGlvbjogRWRpdG9yUG9zaXRpb247XG5cblx0Y29uc3RydWN0b3IoZWRpdG9yOiBFZGl0b3IsIHNldHRpbmdzOiBUZXh0UGx1Z2luU2V0dGluZ3MsIHN1Z2dlc3Rpb25MaXN0OiBzdHJpbmdbXSwgaW5zZXJ0TG9jYXRpb246IEVkaXRvclBvc2l0aW9uKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLmVkaXRvciA9IGVkaXRvcjtcblx0XHR0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG5cdFx0dGhpcy5zdWdnZXN0aW9uTGlzdCA9IHN1Z2dlc3Rpb25MaXN0O1xuXHRcdHRoaXMuaW5zZXJ0TG9jYXRpb24gPSBpbnNlcnRMb2NhdGlvbjtcblx0fVxuXG5cdGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuICh0aGlzLnN1Z2dlc3Rpb25MaXN0LmZpbHRlcigoaXRlbSkgPT4gaXRlbS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpKSkuc29ydCgpO1xuXHR9XG5cdHJlbmRlclN1Z2dlc3Rpb24oaXRlbTogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpIHtcblx0XHRlbC5jcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IGl0ZW0gfSk7XG5cdH1cblx0b25DaG9vc2VTdWdnZXN0aW9uKGl0ZW06IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuXHRcdHRoaXMuZWRpdG9yLnJlcGxhY2VSYW5nZShcblx0XHRcdGl0ZW0sXG5cdFx0XHR7bGluZTogdGhpcy5pbnNlcnRMb2NhdGlvbi5saW5lLCBjaDogdGhpcy5pbnNlcnRMb2NhdGlvbi5jaCAtIDF9LFxuXHRcdFx0e2xpbmU6IHRoaXMuaW5zZXJ0TG9jYXRpb24ubGluZSwgY2g6IHRoaXMuaW5zZXJ0TG9jYXRpb24uY2h9XG5cdFx0KVxuXHRcdHVwZGF0ZUxhc3RFZGl0RGF0ZSh0aGlzLmVkaXRvciwgdGhpcy5zZXR0aW5ncyk7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLmVkaXRvci5zZXRDdXJzb3Ioe1xuXHRcdFx0XHRsaW5lOiB0aGlzLmluc2VydExvY2F0aW9uLmxpbmUsXG5cdFx0XHRcdGNoOiB0aGlzLmluc2VydExvY2F0aW9uLmNoICsgaXRlbS5sZW5ndGggLSAxXG5cdFx0XHR9LCAxMDApO1xuXHRcdH0pXG5cdFx0aWYgKHRoaXMuZWRpdG9yLmdldExpbmUodGhpcy5pbnNlcnRMb2NhdGlvbi5saW5lKS5zdGFydHNXaXRoKCdhc3NpZ25lZFRvOiAnKSkge1xuXHRcdFx0YXNzaWduZWRUb1VwZGF0ZSh0aGlzLmVkaXRvciwgdGhpcy5zZXR0aW5ncywgaXRlbSk7XG5cdFx0fVxuXHR9XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIG1vbWVudCwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyBUZXh0UGx1Z2luU2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzJ1xuXG4vLyBcdTY4QzBcdTZENEJcdTVGNTNcdTUyNERcdTY1ODdcdTY4NjNcdTY2MkZcdTU0MjZcdTdCMjZcdTU0MDggaGVhZGVyIFx1NjNEMlx1NTE2NVx1NzY4NFx1ODk4MVx1NkM0MlxuXG5mdW5jdGlvbiBkaXNhYmxlQXV0b1RleHQoYXBwOiBBcHAsIGVkaXRvcjogRWRpdG9yLCBzZXR0aW5nczogVGV4dFBsdWdpblNldHRpbmdzKTogYm9vbGVhbiB7XG4gICAgbGV0IGRhdGF2aWV3TGluZVRyYWNrID0gMDtcbiAgICBsZXQgdG9wTGV2ZWxMaW5lVHJhY2sgPSAwO1xuICAgIGxldCBpc1RlbXBsYXRlID0gZmFsc2U7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpISk/LmZyb250bWF0dGVyO1xuICAgIC8vIGlmICh0eXBlb2YgbWV0YWRhdGEucGVvcGxlID09PSAnc3RyaW5nJyB8fCAoIG1ldGFkYXRhLnBlb3BsZSBpbnN0YW5jZW9mIEFycmF5ICYmIG1ldGFkYXRhLnBlb3BsZS5sZW5ndGgpICkge1xuICAgIGlmIChtZXRhZGF0YS5oYXNPd25Qcm9wZXJ0eSgncGVvcGxlJykpIHtcbiAgICAgICAgaXNUZW1wbGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICghKGVkaXRvci5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lKSA9PSBcIlwiKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lOyBpbmRleCsrKSB7XG4gICAgICAgIGxldCBsaW5lID0gZWRpdG9yLmdldExpbmUoaW5kZXgpO1xuICAgICAgICBpZiAoZGF0YXZpZXdMaW5lVHJhY2sgPj0gMiAmJiB0b3BMZXZlbExpbmVUcmFjayA9PSAxKSB7XG4gICAgICAgICAgICBpZiAoIShsaW5lID09IFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChzZXR0aW5ncy50b3BMZXZlbExpbmUpKSB7XG4gICAgICAgICAgICB0b3BMZXZlbExpbmVUcmFjayArKztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKHNldHRpbmdzLmRhdGF2aWV3SGVhZGVyTGluZSkpIHtcbiAgICAgICAgICAgIGRhdGF2aWV3TGluZVRyYWNrICsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIChsaW5lLnN0YXJ0c1dpdGgoc2V0dGluZ3MudGVtcGxhdGVEZXRlY3Rpb25TdHIpKSB7XG4gICAgICAgIC8vICAgICBpc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICBpZiAoZGF0YXZpZXdMaW5lVHJhY2sgPD0gMSB8fCAhaXNUZW1wbGF0ZSB8fCAodG9wTGV2ZWxMaW5lVHJhY2sgPT0gMCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gXHU4MUVBXHU1MkE4XHU2M0QyXHU1MTY1IGhlYWRlciBcdTRFRTVcdTUzQ0FcdTY2RjRcdTY1MzlcdTRFQkFcdTRGRTFcdTYwNkZcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQXV0b1RleHQoYXBwOiBBcHAsIGVkaXRvcjogRWRpdG9yLCBzZXR0aW5nczogVGV4dFBsdWdpblNldHRpbmdzKSB7XG4gICAgaWYgKCFkaXNhYmxlQXV0b1RleHQoYXBwLCBlZGl0b3IsIHNldHRpbmdzKSkge1xuICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxuICAgICAgICAgICAgJ1xcblxcbicgKyBzZXR0aW5ncy5zZXBhcmF0aW9uTGluZVN0ciArICdcXG4nICsgbW9tZW50KCkuZm9ybWF0KHNldHRpbmdzLmRhdGVGb3JtYXQpICsgJyAnICsgc2V0dGluZ3MudXNlcm5hbWUsXG4gICAgICAgICAgICB7IGxpbmU6IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lIC0gMSwgY2g6IGVkaXRvci5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lIC0gMSkubGVuZ3RoIH1cbiAgICAgICAgKVxuICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxuICAgICAgICAgICAgJ1xcbicsXG4gICAgICAgICAgICB7IGxpbmU6IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lICsgMSwgY2g6IDAgfVxuICAgICAgICApXG4gICAgfVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxtQkFBb0U7OztBQ0NwRSxzQkFBK0M7QUFvQnhDLElBQU0sbUJBQWdEO0FBQUEsRUFDNUQsVUFBVTtBQUFBLEVBQ1YsU0FBUztBQUFBLEVBQ1QsaUJBQWlCO0FBQUEsRUFDakIsWUFBWTtBQUFBLEVBQ1osa0JBQWtCO0FBQUEsRUFDbEIsbUJBQW1CO0FBQUEsRUFDaEIsY0FBYztBQUFBLEVBQ2Qsb0JBQW9CO0FBQUEsRUFDcEIsb0JBQW9CO0FBQUEsRUFDcEIsc0JBQXNCO0FBQUEsRUFDdEIsV0FBVztBQUNmO0FBSU8sSUFBTSx1QkFBTixjQUFtQyxpQ0FBaUI7QUFBQSxFQUd2RCxZQUFZQyxNQUFVLFFBQW9CO0FBQ3RDLFVBQU1BLE1BQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNsQjtBQUFBLEVBRUEsVUFBZ0I7QUFDWixRQUFJLEVBQUUsWUFBWSxJQUFJO0FBQ3RCLGdCQUFZLE1BQU07QUFFbEIsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU5RCxRQUFJLHdCQUFRLFdBQVcsRUFDbEIsUUFB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
