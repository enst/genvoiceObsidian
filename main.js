/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  username: "placeholder",
  tagSymb: "~",
  lastEditDateStr: "updatedDate:",
  dateFormat: "YYYY-MM-DD",
  peopleFolderPath: "All/Collaborators/",
  separationLineStr: "___",
  topLevelLine: "+++",
  templateFolderPath: "All/Templates/",
  dataviewHeaderLine: "---",
  templateDetectionStr: "type: task",
  peopleStr: "people:"
};
var TextPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Tagging & Adding People" });
    new import_obsidian.Setting(containerEl).setName("Username").setDesc("How other users will identify you in tags, notices, etc.").addText(
      (text) => text.setPlaceholder("default: user").setValue(this.plugin.settings.username).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.username = DEFAULT_SETTINGS.username;
        } else {
          this.plugin.settings.username = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Tag indicator").setDesc("A character/string you and other users will use to tag each other.").addText(
      (text) => text.setPlaceholder("default: @").setValue(this.plugin.settings.tagSymb).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.tagSymb = DEFAULT_SETTINGS.tagSymb;
        } else {
          this.plugin.settings.tagSymb = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Name list file").setDesc("File that stores all candidates for names to be added").addText(
      (text) => text.setPlaceholder("default: collaborator").setValue(this.plugin.settings.peopleFolderPath).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.peopleFolderPath = DEFAULT_SETTINGS.peopleFolderPath;
        } else {
          this.plugin.settings.peopleFolderPath = input;
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h1", { text: "Inserting & Updating Edit Dates" });
    new import_obsidian.Setting(containerEl).setName("Keyword: latest edit date").addText(
      (text) => text.setPlaceholder("default: updatedDate:").setValue(this.plugin.settings.lastEditDateStr).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.lastEditDateStr = DEFAULT_SETTINGS.lastEditDateStr;
        } else {
          this.plugin.settings.lastEditDateStr = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc("Format used in inserting / editing dates.").addText(
      (text) => text.setPlaceholder("default: YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.dateFormat = DEFAULT_SETTINGS.dateFormat;
        } else {
          this.plugin.settings.dateFormat = input;
        }
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h1", { text: "Inserting Header" });
    new import_obsidian.Setting(containerEl).setName("Header line").addText(
      (text) => text.setPlaceholder("default: ___").setValue(this.plugin.settings.separationLineStr).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.separationLineStr = DEFAULT_SETTINGS.separationLineStr;
        } else {
          this.plugin.settings.separationLineStr = input;
        }
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Top level content line").setDesc("To indicate content to always appear at the top").addText(
      (text) => text.setPlaceholder("default: +++").setValue(this.plugin.settings.topLevelLine).onChange(async (input) => {
        if (input.localeCompare("") == 0) {
          this.plugin.settings.topLevelLine = DEFAULT_SETTINGS.topLevelLine;
        } else {
          this.plugin.settings.topLevelLine = input;
        }
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/assets.ts
var import_obsidian3 = require("obsidian");

// src/modals.ts
var import_obsidian2 = require("obsidian");
var TemplateSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.path.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.path.substring(this.settings.templateFolderPath.length, item.path.length - 3) });
  }
  // 选择时触发
  async onChooseSuggestion(item, evt) {
    let content = await this.app.vault.read(item);
    this.editor.replaceRange(content, { line: 0, ch: 0 });
    setTimeout(async () => {
      let oldContent = this.editor.getValue();
      let newContent = oldContent.replace(new RegExp("{{date}}", "gi"), (0, import_obsidian2.moment)().format(this.settings.dateFormat)).replace("people: ", `people: ${this.settings.username}`).replace("createdBy: ", `createdBy: ${this.settings.username}`);
      await this.app.vault.modify(this.app.workspace.getActiveFile(), newContent);
    });
  }
};
var StatusSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList, lineNum) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
    this.lineNum = lineNum;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.toLowerCase().includes(query.toLowerCase())).sort();
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  async onChooseSuggestion(item, evt) {
    this.editor.replaceRange(
      "status: " + item,
      { line: this.lineNum, ch: 0 },
      { line: this.lineNum, ch: this.editor.getLine(this.lineNum).length }
    );
    if (item == "archived") {
      let path = this.app.workspace.getActiveFile().path;
      let dir = path.split("/");
      if (!await this.app.vault.adapter.exists(`${dir[0]}/_Archived/${(0, import_obsidian2.moment)().format("YYYY")}`)) {
        await this.app.vault.createFolder(`${dir[0]}/_Archived/${(0, import_obsidian2.moment)().format("YYYY")}`);
      }
      this.app.fileManager.renameFile(this.app.vault.getAbstractFileByPath(path), `${dir[0]}/_Archived/${(0, import_obsidian2.moment)().format("YYYY")}/${dir[dir.length - 1]}`);
    }
  }
};
var PeopleSuggestionModal = class extends import_obsidian2.SuggestModal {
  constructor(editor, settings, suggestionList, insertLocation) {
    super(app);
    this.editor = editor;
    this.settings = settings;
    this.suggestionList = suggestionList;
    this.insertLocation = insertLocation;
  }
  getSuggestions(query) {
    return this.suggestionList.filter((item) => item.toLowerCase().includes(query.toLowerCase())).sort();
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  onChooseSuggestion(item, evt) {
    this.editor.replaceRange(
      item,
      { line: this.insertLocation.line, ch: this.insertLocation.ch - 1 },
      { line: this.insertLocation.line, ch: this.insertLocation.ch }
    );
    updateLastEditDate(this.editor, this.settings);
    setTimeout(() => {
      this.editor.setCursor({
        line: this.insertLocation.line,
        ch: this.insertLocation.ch + item.length - 1
      }, 100);
    });
    if (this.editor.getLine(this.insertLocation.line).startsWith("assignedTo: ")) {
      assignedToUpdate(this.editor, this.settings, item);
    }
  }
};

// src/assets.ts
function updateLastEditDate(editor, settings) {
  let lineIndex = 0;
  while (editor.getLine(lineIndex)) {
    let line = editor.getLine(lineIndex);
    if (line.startsWith(settings.lastEditDateStr)) {
      if (editor.getCursor().line != lineIndex) {
        if (line.length > settings.lastEditDateStr.length + settings.dateFormat.length) {
          editor.replaceRange(
            (0, import_obsidian3.moment)().format(settings.dateFormat),
            { line: lineIndex, ch: settings.lastEditDateStr.length + 1 },
            { line: lineIndex, ch: settings.lastEditDateStr.length + settings.dateFormat.length + 1 }
          );
        } else {
          editor.replaceRange(
            (0, import_obsidian3.moment)().format(settings.dateFormat),
            { line: lineIndex, ch: settings.lastEditDateStr.length + 1 },
            { line: lineIndex, ch: line.length }
          );
        }
      }
      break;
    }
    lineIndex++;
  }
}
async function openPeopleSuggestionModal(app2, settings) {
  let editor = app2.workspace.activeEditor.editor;
  let location = editor.getCursor();
  const files = app2.vault.getMarkdownFiles();
  const people = [];
  for (let index = 0; index < files.length; index++) {
    if (files[index].path.startsWith(settings.peopleFolderPath)) {
      people.push(files[index].basename);
    }
  }
  editor.setCursor({ line: editor.getCursor().line - 1, ch: 0 });
  new PeopleSuggestionModal(app2.workspace.activeEditor.editor, settings, people, location).open();
}
async function openStatusSuggestionModal(app2, settings, lineNum) {
  const files = app2.vault.getMarkdownFiles().filter((file) => file.path.startsWith("All/status"));
  const statusFile = files[0];
  const statusOptions = (await app2.vault.read(statusFile)).split("\n");
  new StatusSuggestionModal(app2.workspace.activeEditor.editor, settings, statusOptions, lineNum).open();
}
function openTemplateSuggestionModal(app2, settings) {
  const files = app2.vault.getMarkdownFiles();
  const templateFiles = [];
  for (let index = 0; index < files.length; index++) {
    if (files[index].path.startsWith(settings.templateFolderPath)) {
      templateFiles.push(files[index]);
    }
  }
  new TemplateSuggestionModal(app2.workspace.activeEditor.editor, settings, templateFiles).open();
}
function assignedToUpdate(editor, settings, name) {
  let lineIndex = 0;
  while (editor.getLine(lineIndex)) {
    let line = editor.getLine(lineIndex);
    if (line.startsWith(settings.peopleStr) && !line.contains(name)) {
      editor.replaceRange(
        ",~" + name,
        { line: lineIndex, ch: editor.getLine(lineIndex).length }
      );
      break;
    }
    lineIndex++;
  }
}

// src/autotext.ts
var import_obsidian4 = require("obsidian");
function disableAutoText(app2, editor, settings) {
  var _a;
  let dataviewLineTrack = 0;
  let topLevelLineTrack = 0;
  let isTemplate = false;
  const metadata = (_a = this.app.metadataCache.getFileCache(this.app.workspace.getActiveFile())) == null ? void 0 : _a.frontmatter;
  if (metadata.hasOwnProperty("people")) {
    isTemplate = true;
  }
  if (!(editor.getLine(editor.getCursor().line) == "")) {
    return true;
  }
  for (let index = 0; index < editor.getCursor().line; index++) {
    let line = editor.getLine(index);
    if (dataviewLineTrack >= 2 && topLevelLineTrack == 1) {
      if (!(line == "")) {
        return true;
      }
    }
    if (line.startsWith(settings.topLevelLine)) {
      topLevelLineTrack++;
    }
    if (line.startsWith(settings.dataviewHeaderLine)) {
      dataviewLineTrack++;
    }
  }
  if (dataviewLineTrack <= 1 || !isTemplate || topLevelLineTrack == 0) {
    return true;
  }
  return false;
}
function generateAutoText(app2, editor, settings) {
  if (!disableAutoText(app2, editor, settings)) {
    editor.replaceRange(
      "\n\n" + settings.separationLineStr + "\n" + (0, import_obsidian4.moment)().format(settings.dateFormat) + " " + settings.username,
      { line: editor.getCursor().line - 1, ch: editor.getLine(editor.getCursor().line - 1).length }
    );
    editor.replaceRange(
      "\n",
      { line: editor.getCursor().line + 1, ch: 0 }
    );
  }
}

// main.ts
var TextPlugin = class extends import_obsidian5.Plugin {
  // obsidian 启动时激活
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new TextPluginSettingTab(this.app, this));
    this.registerDomEvent(document, "keypress", (evt) => {
      if (!this.app.workspace.getActiveFile().path.startsWith(this.settings.templateFolderPath)) {
        updateLastEditDate(this.app.workspace.activeEditor.editor, this.settings);
      }
    });
    this.registerEvent(this.app.workspace.on("editor-paste", () => {
      if (!this.app.workspace.getActiveFile().path.startsWith(this.settings.templateFolderPath)) {
        updateLastEditDate(this.app.workspace.activeEditor.editor, this.settings);
      }
    }));
    const ribbonIconInsertDate = this.addRibbonIcon("calendar", "Insert Date", (evt) => {
      let editor = this.app.workspace.activeEditor.editor;
      editor.replaceRange((0, import_obsidian5.moment)().format(this.settings.dateFormat), editor.getCursor());
      updateLastEditDate(editor, this.settings);
    });
    this.registerEvent(this.app.metadataCache.on("changed", async (file, data, cache) => {
      var _a;
      let path = file.path;
      let dir = path.split("/");
      if (((_a = cache.frontmatter) == null ? void 0 : _a.status) === "archived") {
        if (!await this.app.vault.adapter.exists(`${dir[0]}/_Archived/${(0, import_obsidian5.moment)().format("YYYY")}`)) {
          await this.app.vault.createFolder(`${dir[0]}/_Archived/${(0, import_obsidian5.moment)().format("YYYY")}`);
        }
        this.app.fileManager.renameFile(this.app.vault.getAbstractFileByPath(path), `${dir[0]}/_Archived/${(0, import_obsidian5.moment)().format("YYYY")}/${dir[dir.length - 1]}`);
      }
    }));
    this.registerEvent(this.app.workspace.on("editor-change", (editor) => {
      const key = editor.getLine(editor.getCursor().line).charAt(editor.getCursor().ch - 1);
      if (key.localeCompare(this.settings.tagSymb) == 0) {
        openPeopleSuggestionModal(this.app, this.settings);
      }
    }));
    this.registerDomEvent(document, "keypress", (evt) => {
      generateAutoText(this.app, this.app.workspace.activeEditor.editor, this.settings);
    });
    this.registerEvent(this.app.workspace.on("editor-paste", () => {
      generateAutoText(this.app, this.app.workspace.activeEditor.editor, this.settings);
    }));
    setTimeout(() => {
      this.registerEvent(this.app.vault.on("create", (file) => {
        setTimeout(async () => {
          let content = await this.app.vault.read(file);
          if (file.path.endsWith(".md") && content == "") {
            openTemplateSuggestionModal(this.app, this.settings);
          }
        }, 100);
      }));
    }, 100);
    this.registerDomEvent(document, "click", async (evt) => {
      var _a, _b, _c;
      const editor = (_c = (_b = (_a = this.app) == null ? void 0 : _a.workspace) == null ? void 0 : _b.activeEditor) == null ? void 0 : _c.editor;
      if (editor == null ? void 0 : editor.getLine(editor.getCursor().line).contains("status:")) {
        await openStatusSuggestionModal(this.app, this.settings, editor.getCursor().line);
        editor.setCursor({ line: editor.getCursor().line - 1, ch: 0 });
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
